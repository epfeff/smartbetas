Welcome to SmartBetas's documentation!
======================================

.. toctree::
   :maxdepth: 2
   :caption: Contents:


SmartBetas Investing
--------------------

This program is aimed at testing Smart Betas strategies. It allows users to
build portfolios and virtually invest in them. Users can also verify if these
strategies work by asking the program to compute returns on their virtual
investments.

:mod:`main.py` is the first module loaded when a user starts the program, it
initiates the application.

The program is built on a database, the communications between the program and
the db is managed by `pydal` [1]_ (Python Database Abstraction Layer). The
module checks if `pydal` is installed on the host; if not, the program outputs a
message and closes.

The module will also check if the host is connected to the internet, this is
required because the data used to compute portfolios is pulled from a web API.
If the host is not connected to the internet, the program will output a message
and the program will close.

The connectivity test is performed by trying to open a socket [2]_ on google
website's TCP port 80 (`www.google.com:80`).

This module also clears the command line window prior starting the console.

.. note::
  To start the program, one must call python on the folder containing the
  `__main__.py` module.

.. [1] pyDal's API documentation:
   https://pydal.readthedocs.io/en/latest/

.. [2] Python socket - Low-level netorking interface:
   https://docs.python.org/3/library/socket.html

Database Layer
--------------
:mod:`db.py` manages the database where the application is storing
operations, tickers, portfolios and reports.

The python layer that manages the database is provided by `pyDal` [3]_, this is
an open source python package which acts as an abstraction layer between an
application and a database.

`pyDal` can handle multiple types of database, in application there are no
intensive database operations therefore we can use sqlite3 [4]_.

When imported the module is checking if the `db` folder (located at the same
level than the application folder) is present. The folder is created if not
found.

The database is initialized with the following statement:

.. code-block:: python

   folder = os.getcwd()+('/db' if os.name != 'nt' else '\db')
   db = DAL('sqlite://storage.sqlite', folder=folder, migrate_enabled=True)

Where `folder` is the database location and `migrate_enabled` indicates to
`pyDal` that it should not assume that the tables already exists, but rather
check and compare against the `define_table` statements.

For this project we defined the following tables:

**Investments**:
Contains the investments made by the user, each entry features a `date`,
a `name`,  a volatility based portfolio `vol`, a momentum based portfolio `cmr`,
a composite based portfolio `cmp` and a register containing the prices of all
the stocks listed in each portfolio (the portfolios and the price register
are stored in `json`).

.. code-block:: json

  {
      "ACB": 1832,  //ticker: quantity
      "AMD": 597,
      "KEYW": 1487,
      ...
  }

**Portfolios**:
Contains the portfolios that the user chose to save after computing them. Each
entry features a `date`, a `name` a volatility based portfolio
`vol`, a momentum based portfolio `cmr`, a composite based portfolio `cmp` and
a register containing the prices of all the securities listed in each portfolio
(the portfolios and the price register are stored in `json`).

.. code-block:: json

  {   //example with momentum
      "AAPL": 6.5261228230980795,   //ticker: momentum
      "ACB": 27.887788778877898,
      "AMD": 149.33058702368692,
      ...
  }

**Symbols**:
Contains the tickers and their corresponding names, each entry features a
`ticker` and a  `name`.

**Checks**:
Contains the portfolios returns reports generated by users and saved in the
database. Each entry features a `name`, a volatility based portfolio `vol`,
a momentum based portfolio `cmr`, a composite based portfolio `cmp` and `date`.
(the portfolios are stored in `json`).

The `json` structure for `checks` table is as follow:

.. code-block:: json

   {
   "ACB": {
       "abs": -109.92,                // absolute returns
       "date": "2019-04-22 16:57:42", // data of
       "new": 9.04,
       "old": 9.1,
       "qty": 1832,
       "rel": -0.66
   },
   ...


.. [3] pyDal's API documentation:
   https://pydal.readthedocs.io/en/latest/

.. [4] SQLite3 documentation:
   https://www.sqlite.org/draft/version3.html

Tickers - User Input
--------------------
The main user's data inputs are tickers which will be used to form
portfolios. These inputs must be thoroughly checked and stored locally ( in
a database ) for future usage.

.. automodule :: tickers
   :members:

Web API Interface
-----------------

A web API [5]_ is an Application Programming Interface for a web server or a web
browser. On the server side, it consists or one or more publicly exposed
endpoints accessible through `http` requests. The content is typically expressed
in JSON (JavaScript Object Notation) or XML (eXtensible Markup Language).

:mod:`smartbetas` relies on two APIs. One is used to convert tickers to
company names (As example: AAPL -> Apple Inc), the second one is used to get
information about a stock (daily open, daily high, daily low, daily close and
daily volume).

The ticker API is totally free and open source, it is maintained by a single
contributor (`Kambala Yashwanth <https://github.com/yashwanth2804>`_), this API
simply takes a ticker as input and returns the name of the stock if found [6]_.

`Alpha Vantage <https://www.alphavantage.co>`_ provides the stock data API.
This is not a free service, however they provide a free limited access to their
data. The following constraints are applicable when using a free API Key [7]_:

    - 5 API requests per minute
    - 500 API requests per day

Note that Alpha Vantage requires free users to register to get their API key.
Our key is stored in :mod:`__gbl__`.

.. [5] Wikipedia Web API:
   https://en.wikipedia.org/wiki/Web_API

.. [6] Ticker Search API doc:
   https://github.com/yashwanth2804/TickerSymbol

.. [7] Alpha Vantage API Documentation:
   https://www.alphavantage.co/documentation/

.. automodule :: api
   :members:

Building Portfolios
-------------------

This modules uses data returned from the web API (:py:func:`api.tsd`) to compute
the volatility and momentum of each stock.

Based on the stock ranking it also builds a composite portfolio
:py:func:`composite.composite`.

To expedite things, this module uses python's `concurrent.futures` [8]_ to fetch
data from the API in a parallel fashion. Executing `http` requests in parallel
saves a considerable amount of time.

.. [8] Python ``concurrent.futures``:
   https://docs.python.org/3/library/concurrent.futures.html

.. automodule :: compute
   :members:

Volatility
**********

In this application, volatility is calculated over a period of two years
(between two years ago and now).

To compute the volatility, a standard deviation needs to be performed. To do
so we use the standard python's statistics [9]_ package.

.. [9] Python statistics:
   https://docs.python.org/3/library/statistics.html

.. automodule :: volatility
   :members:

Momentum
********

We define momentum as the cumulative returns over a period of 10 months (
between 12 months ago and 2 months ago).

All the date and time operations are handled with python's standard
`datetime` module [10]_.

.. [10] Python datetime:
   https://docs.python.org/3/library/datetime.html

.. automodule :: cumulative
   :members:

Composite
*********

In this application we define a composite portfolio as a portfolio based on the
ranking of stocks in the volatility portfolio and in the momentum portfolio.

The score of a stock is the sum of its index (rank) in the two other
portfolio. The stocks are then sorted in an ascending fasion.

.. automodule :: composite
   :members:

Investing in the Portfolios
---------------------------

In the application, after a user requested the program to generate portfolios
with the tickers he provided, he can choose to invest money in each of them.

    .. note::W
      For now, one can only invest 100'000 USD in each portfolio with a
      repartition of `1/n` where `n` is the amount of stocks in a portfolio.

.. automodule :: money
   :members:

Measuring Results
-----------------

Using the latest prices of the stocks (fetched from the web API), this module
will compute the returns of each portfolios in which the user invested.

To expedite things, this module uses python's `concurrent.futures` to fetch
data from the API in a parallel fashion. Executing `http` requests in parallel
saves a considerable amount of time.

 .. automodule :: check
    :members:

User Interface
--------------

The user interface is built on top of python's standard `cmd` [11]_ module with
a class `betacmd`.

`betacmd` inherits everything from the standard cmd `class`.

The following parameters are modified:

    - `intro`   : 'Smart Betas Investing - Requires an internet connection'
    - `prompt`  : (beta)

A new parameter is introduced:

    - 'out'     : `'-->'`, this string precedes outputs on the console

.. [11] Python cmd module:
   https://docs.python.org/3/library/cmd.html

.. automodule :: console
   :members:

Input / Outputs
---------------
.. automodule :: i_o
   :members:

Global Variables
----------------

In this application we need to make some pieces of data available for multiple
modules, to do so, we use global scope variables. For the sake of clarity,
they are declared on a separated module.

The following global variables are declared:
    - `TICKERS`     :   :class:`list` storing tickers to compute
    - `NAMES`       :   :class:`list` storing `TICKERS`'s name
    - `P_VOL`       :   :class:`dict` storing the volatility portfolio
    - `P_CMR`       :   :class:`dict` storing the momentum portfolio
    - `P_CMP`       :   :class:`dict` storing the composite portfolio
    - `PRICES`      :   :class:`dict` storing the prices register
    - `API_KEY`     :   :class:`string` storing the API key
    - `API_URL`     :   :class:`string` storing the API URL

.. automodule :: gbl

Test Modules
----------------

The functions used to compute the volatility and the momentum can be tested
with test modules. Developers are encouraged to test the modified modules with
these test modules.

.. automodule :: test_volatility
   :members:
.. automodule :: test_cumulative
   :members:
