# -*- coding: UTF-8 -*-
""":mod:`__db__` is used to handle the database in which the application is
storing operations, tickers, portfolios and reports.

The layer to manage the database is provided by `pyDal`, this is an open source
python package acting as an abstraction layer between an application and a
database.

`pyDal` can handle multiple types of database, in this case since there will
not be intensive database operations we use sqlite3.

When imported the module is checking if the `db` folder (located at the same
level than the application folder) is present. The folder is created if not
found.

The database is then initialize with the following statement:

.. code-block:: python

    folder = os.getcwd()+('/db' if os.name != 'nt' else '\db')
    db = DAL('sqlite://storage.sqlite', folder=folder, migrate_enabled=True)

Where `folder` is the database location and `migrate_enabled` indicates to
`pyDal` than it should not assume that the tables exists, but rather check and
compare against the `define_table` statements.

For this project we defined the following tables:

**Investments** - `investments`:
Contains the investments made by the user, each entry features a `date`,
a `name` a volatility based portfolio `vol`, a momentum based portfolio `cmr`, a
composite based portfolio `cmp` and a register containing the prices of all
the securities listed in each portfolio (the portfolios and the price register
are stored in `json`).

**Portfolios** - `portfolios`:
Contains the computed and ranked portfolios that the user chose to save after
computing. Each entry features a `date`, a `name` a volatility based portfolio
`vol`, a momentum based portfolio `cmr`, a composite based portfolio `cmp` and
a register containing the prices of all the securities listed in each portfolio
(the portfolios and the price register are stored in `json`).

**Symbols** - `symbols`:
Contains the tickers and their corresponding names, each entry features a ticker
`ticker` and a name `name`.

**Checks** - `checks`:
Contains the reports of comparisons of portfolios (old vs now) generated by
users and saved in the database for future usage. Each entry features a name
`name`, a volatility based portfolio `vol`, a momentum based
portfolio `cmr`, a composite based portfolio `cmp` and date `date`.
(the portfolios are stored in `json`).

The `json` structure for `checks` table is as follow:

.. code-block:: json

    {
    "ACB": {
        "abs": -109.92,
        "date": "2019-04-22 16:57:42",
        "new": 9.04,
        "old": 9.1,
        "qty": 1832,
        "rel": -0.66
    },
    "AMD": {
        "abs": -30.81,
        "date": "2019-04-22 16:57:42",
        "new": 27.88,
        "old": 27.9316,
        "qty": 597,
        "rel": -0.18
    },
    ...


.. _pyDal's API documentation:
   https://pydal.readthedocs.io/en/latest/
"""
from pydal import DAL, Field
import os

os.mkdir('db') if not os.path.isdir('db') else None
# DB file definition
folder = os.getcwd()+('/db' if os.name != 'nt' else '\db')
db = DAL('sqlite://storage.sqlite', folder=folder, migrate_enabled=True)

db.define_table('investments',
                Field('date', 'datetime'),
                Field('name', 'string'),
                Field('vol', 'json'),
                Field('cmr', 'json'),
                Field('cmp', 'json'),
                Field('prc', 'json'))

db.define_table('portfolios',
                Field('date', 'datetime'),
                Field('name', 'string'),
                Field('vol', 'json'),
                Field('cmr', 'json'),
                Field('cmp', 'json'),
                Field('prc', 'json'))

db.define_table('symbols',
                Field('ticker', 'string'),
                Field('name', 'string'))

db.define_table('checks',
                Field('name', 'string'),
                Field('vol', 'json'),
                Field('cmr', 'json'),
                Field('cmp', 'json'),
                Field('date', 'string'))
